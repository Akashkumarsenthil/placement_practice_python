#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Jul 25 12:49:14 2020

@author: akashkumar
"""

from collections import defaultdict

class Graph:
    def __init__(self):
        self.graph = defaultdict(list)
        
    def addEdge(self, u, v):
        self.graph[u].append(v)
        
    def DFSUtil(self, v, visited):
        visited[v] = True
        
        for i in self.graph[v]:
            if self.graph[i] == False:
                self.DFSUtil(i, visited)
    
    def findMother(self):
        V = len(self.graph)
        visited = [False] * V
        v = 0
        for i in range(V):
            if visited[i] == False:
                self.DFSUtil(i, visited)
                v = i
        visited = [False] * V
        self.DFSUtil(v, visited)
        if any(i == False for i in visited):
            return -1
        else:
            return v
                
g = Graph() 
g.addEdge(0, 1) 
g.addEdge(0, 2) 
g.addEdge(1, 3) 
g.addEdge(4, 1) 
g.addEdge(6, 4) 
g.addEdge(5, 6) 
g.addEdge(5, 2) 
g.addEdge(6, 0)

print(str(g.findMother()))















